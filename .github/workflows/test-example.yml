name: Test Django Guest User Example

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, "3.10", "3.11", "3.12"]
        django-version: [4.2, 5.0, 5.1]
        exclude:
          # Django 5.0+ requires Python 3.10+
          - python-version: 3.9
            django-version: 5.0
          - python-version: 3.9
            django-version: 5.1

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install Django==${{ matrix.django-version }}
        pip install django-allauth pytest pytest-django requests-oauthlib

    - name: Run Django checks
      run: |
        python manage.py check

    - name: Run migrations
      run: |
        python manage.py makemigrations
        python manage.py migrate

    - name: Test Django development server startup
      run: |
        timeout 10s python manage.py runserver || true
        echo "Development server can start successfully"

  test-example:
    runs-on: ubuntu-latest
    needs: test
    # Only run example tests after basic tests pass

    env:
      BASE_URL: http://127.0.0.1:8000
      SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY || 'django-insecure-test-example-key-not-for-production-12345' }}
      DEBUG: 'True'
      # Enable detailed Django logging
      DJANGO_LOG_LEVEL: 'DEBUG'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Set up Node.js for Playwright
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install Django==5.1
        pip install django-allauth pytest pytest-django requests-oauthlib
        pip install playwright

    - name: Install Playwright browsers
      run: |
        playwright install --with-deps chromium

    - name: Create Django settings with enhanced logging
      run: |
        cat >> test_proj/settings_debug.py << 'EOF'
        # Import all settings from the original settings file
        from .settings import *
        import os

        # Override DEBUG setting
        DEBUG = True

        # Add STATIC_ROOT for collectstatic to work
        STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
        
        # Allow all hosts for testing
        ALLOWED_HOSTS = ['*']

        # Enhanced logging configuration for example project
        LOGGING = {
            'version': 1,
            'disable_existing_loggers': False,
            'formatters': {
                'verbose': {
                    'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
                    'style': '{',
                },
                'simple': {
                    'format': '{levelname} {message}',
                    'style': '{',
                },
            },
            'handlers': {
                'file': {
                    'level': 'DEBUG',
                    'class': 'logging.FileHandler',
                    'filename': '../django_debug.log',
                    'formatter': 'verbose',
                },
                'console': {
                    'level': 'DEBUG',
                    'class': 'logging.StreamHandler',
                    'formatter': 'verbose',
                },
            },
            'root': {
                'handlers': ['file', 'console'],
                'level': 'INFO',
            },
            'loggers': {
                'django': {
                    'handlers': ['file', 'console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'django.request': {
                    'handlers': ['file', 'console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'django.server': {
                    'handlers': ['file', 'console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'guest_user': {
                    'handlers': ['file', 'console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
            },
        }

        # Use environment variables for sensitive settings
        SECRET_KEY = os.environ.get('SECRET_KEY', SECRET_KEY)
        EOF

    - name: Prepare Django project
      run: |
        echo "=== Running Django migrations ==="
        python manage.py migrate --settings=test_proj.settings_debug
        
        echo "=== Collecting static files ==="
        python manage.py collectstatic --noinput --settings=test_proj.settings_debug

    - name: Create test superuser
      run: |
        echo "from django.contrib.auth import get_user_model; User = get_user_model(); \
        User.objects.filter(username='testuser').exists() or \
        User.objects.create_superuser('testuser', 'test@example.com', 'testpassword123')" \
        | python manage.py shell --settings=test_proj.settings_debug
      env:
        DJANGO_SUPERUSER_USERNAME: testuser
        DJANGO_SUPERUSER_PASSWORD: testpassword123

    - name: Start Django development server with debug logging
      run: |
        # Start Django server in background with debug logging
        echo "Starting Django server with debug logging..."
        python manage.py runserver 0.0.0.0:8000 --settings=test_proj.settings_debug > ../django_server.log 2>&1 &
        echo $! > django_server.pid
        echo "Django server started with PID $(cat django_server.pid)"
        
        # Wait for Django to start up
        echo "Waiting for Django server to be ready..."
        for i in {1..30}; do
          if curl -f http://127.0.0.1:8000/admin/login/ > /dev/null 2>&1; then
            echo "Django server is ready!"
            break
          fi
          echo "Attempt $i: Django server not ready yet, waiting..."
          sleep 2
        done
        
        # Final check
        if ! curl -f http://127.0.0.1:8000/admin/login/ > /dev/null 2>&1; then
          echo "ERROR: Django server failed to start properly"
          echo "=== Django Server Log ==="
          cat ../django_server.log || echo "No server log found"
          echo "=== Django Debug Log ==="
          cat ../django_debug.log || echo "No debug log found"
          cat django_server.pid
          ps aux | grep manage.py
          exit 1
        fi

    - name: Create comprehensive guest user demo script
      run: |
        cat > take_comprehensive_demo.py << 'EOF'
        #!/usr/bin/env python3
        import os
        import sys
        import logging
        import time
        from datetime import datetime
        from playwright.sync_api import sync_playwright

        # Set up logging for the demo script
        logging.basicConfig(
            level=logging.DEBUG,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('demo_process.log'),
                logging.StreamHandler()
            ]
        )

        logger = logging.getLogger('guest_user_demo')

        # Define the base URL for your running Django project
        BASE_URL = os.environ.get('BASE_URL', 'http://127.0.0.1:8000')

        # Comprehensive URL test cases based on the django-guest-user2 URL structure
        URLS_TO_TEST = [
            {
                'path': '/admin/',
                'name': 'admin_login',
                'description': 'Django admin login page',
                'user_type': 'anonymous'
            },
            {
                'path': '/admin/',
                'name': 'admin_dashboard',
                'description': 'Django admin dashboard (logged in)',
                'user_type': 'admin',
                'requires_login': True
            },
            {
                'path': '/allow_guest_user/',
                'name': 'allow_guest_user_anonymous',
                'description': 'Allow guest user view (anonymous user)',
                'user_type': 'anonymous'
            },
            {
                'path': '/allow_guest_user/',
                'name': 'allow_guest_user_guest',
                'description': 'Allow guest user view (guest user)',
                'user_type': 'guest'
            },
            {
                'path': '/allow_guest_user/',
                'name': 'allow_guest_user_regular',
                'description': 'Allow guest user view (regular user)',
                'user_type': 'admin'
            },
            {
                'path': '/guest_user_required/',
                'name': 'guest_user_required_anonymous',
                'description': 'Guest user required view (anonymous - should create guest)',
                'user_type': 'anonymous'
            },
            {
                'path': '/guest_user_required/',
                'name': 'guest_user_required_guest',
                'description': 'Guest user required view (guest user)',
                'user_type': 'guest'
            },
            {
                'path': '/regular_user_required/',
                'name': 'regular_user_required_anonymous',
                'description': 'Regular user required view (anonymous - should redirect)',
                'user_type': 'anonymous'
            },
            {
                'path': '/regular_user_required/',
                'name': 'regular_user_required_admin',
                'description': 'Regular user required view (admin user)',
                'user_type': 'admin'
            },
            {
                'path': '/mixin/allow_guest_user/',
                'name': 'mixin_allow_guest_user',
                'description': 'Mixin-based allow guest user view',
                'user_type': 'guest'
            },
            {
                'path': '/mixin/guest_user_required/',
                'name': 'mixin_guest_user_required',
                'description': 'Mixin-based guest user required view',
                'user_type': 'guest'
            },
            {
                'path': '/mixin/regular_user_required/',
                'name': 'mixin_regular_user_required',
                'description': 'Mixin-based regular user required view',
                'user_type': 'admin'
            },
            {
                'path': '/convert/',
                'name': 'convert_form_anonymous',
                'description': 'Guest conversion form (anonymous - should redirect)',
                'user_type': 'anonymous'
            },
            {
                'path': '/convert/',
                'name': 'convert_form_guest',
                'description': 'Guest conversion form (guest user)',
                'user_type': 'guest',
                'interactive': True
            },
            {
                'path': '/convert/success/',
                'name': 'convert_success',
                'description': 'Guest conversion success page',
                'user_type': 'guest'
            }
        ]

        OUTPUT_DIR = 'screenshots'
        VIDEO_DIR = 'videos'

        def setup_output_directories():
            """Create output directories for screenshots and videos."""
            for directory in [OUTPUT_DIR, VIDEO_DIR]:
                if not os.path.exists(directory):
                    os.makedirs(directory)
                    logger.info(f"Created directory: {directory}")

        def create_guest_user_session(context):
            """Create a browser context with a guest user session."""
            page = context.new_page()
            
            # Visit a guest-user-required page to trigger guest user creation
            logger.info("Creating guest user session...")
            page.goto(f"{BASE_URL}/guest_user_required/")
            page.wait_for_timeout(2000)
            
            logger.info("Guest user session established")
            return page

        def login_admin_user(context, username, password):
            """Log in as admin user."""
            page = context.new_page()
            
            logger.info("Logging in as admin user...")
            page.goto(f"{BASE_URL}/admin/login/")
            page.wait_for_selector('input[name="username"]', timeout=10000)
            
            page.fill('input[name="username"]', username)
            page.wait_for_timeout(500)
            page.fill('input[name="password"]', password)
            page.wait_for_timeout(500)
            
            page.click('input[type="submit"]')
            
            try:
                page.wait_for_selector('h1:has-text("Django administration")', timeout=10000)
                logger.info("Admin login successful!")
                return page
            except:
                logger.error("Admin login failed")
                return None

        def capture_url_with_user_type(context, url_info, admin_credentials=None):
            """
            Capture URL with specific user type (anonymous, guest, or admin).
            """
            url_path = url_info['path']
            name = url_info['name']
            description = url_info['description']
            user_type = url_info['user_type']
            interactive = url_info.get('interactive', False)
            
            full_url = f"{BASE_URL}{url_path}"
            
            try:
                logger.info(f"Testing {name}: {description} [User: {user_type}]")
                
                # Set up the appropriate user session
                if user_type == 'anonymous':
                    page = context.new_page()
                elif user_type == 'guest':
                    page = create_guest_user_session(context)
                elif user_type == 'admin':
                    if admin_credentials:
                        page = login_admin_user(context, admin_credentials[0], admin_credentials[1])
                        if not page:
                            logger.error(f"Failed to create admin session for {name}")
                            return False
                    else:
                        logger.error(f"Admin credentials required for {name}")
                        return False
                else:
                    logger.error(f"Unknown user type: {user_type}")
                    return False
                
                # Navigate to the target URL
                logger.info(f"Navigating to {full_url}")
                page.goto(full_url, wait_until='domcontentloaded', timeout=30000)
                page.wait_for_timeout(3000)
                
                # Handle interactive pages
                if interactive and url_path == '/convert/':
                    demonstrate_conversion_form(page)
                
                # Take screenshot
                screenshot_path = os.path.join(OUTPUT_DIR, f"{name}.png")
                page.screenshot(path=screenshot_path, full_page=True)
                logger.info(f"Screenshot saved: {screenshot_path}")
                
                # Additional wait for video
                page.wait_for_timeout(2000)
                
                # Log the current URL to see if there were redirects
                current_url = page.url
                if current_url != full_url:
                    logger.info(f"Redirected from {full_url} to {current_url}")
                
                # Log page title and any visible text for debugging
                try:
                    title = page.title()
                    logger.info(f"Page title: {title}")
                    
                    # Look for any text content that gives us clues about the page state
                    body_text = page.locator('body').inner_text()[:200] if page.locator('body').count() > 0 else "No body content"
                    logger.info(f"Page content preview: {body_text}...")
                    
                except Exception as e:
                    logger.warning(f"Could not extract page info: {e}")
                
                page.close()
                return True
                
            except Exception as e:
                logger.error(f"Failed to capture {name}: {e}")
                return False

        def demonstrate_conversion_form(page):
            """
            Demonstrate the guest user to regular user conversion form.
            """
            try:
                logger.info("Demonstrating guest user conversion form...")
                
                # Wait for form to load
                page.wait_for_timeout(2000)
                
                # Look for form fields
                username_field = page.query_selector('input[name="username"]')
                password1_field = page.query_selector('input[name="password1"]')
                password2_field = page.query_selector('input[name="password2"]')
                
                if username_field and password1_field and password2_field:
                    logger.info("Filling out conversion form...")
                    
                    # Fill the form with demo data
                    username_field.fill("demo_converted_user")
                    page.wait_for_timeout(500)
                    
                    password1_field.fill("demo_password_123")
                    page.wait_for_timeout(500)
                    
                    password2_field.fill("demo_password_123")
                    page.wait_for_timeout(500)
                    
                    # Note: We don't submit the form to avoid actually converting the user
                    # This is just for demonstration purposes
                    logger.info("Form filled (not submitted for demo purposes)")
                else:
                    logger.info("Conversion form fields not found as expected")
                    
            except Exception as e:
                logger.warning(f"Error demonstrating conversion form: {e}")

        def main():
            setup_output_directories()

            # Get admin credentials from environment variables
            admin_username = os.environ.get('DJANGO_SUPERUSER_USERNAME')
            admin_password = os.environ.get('DJANGO_SUPERUSER_PASSWORD')
            admin_credentials = (admin_username, admin_password) if admin_username and admin_password else None

            logger.info(f"Starting comprehensive guest user demo at {datetime.now()}")
            logger.info(f"Base URL: {BASE_URL}")
            logger.info(f"Output directories: {OUTPUT_DIR}, {VIDEO_DIR}")
            logger.info(f"Testing {len(URLS_TO_TEST)} different URL/user combinations")

            with sync_playwright() as p:
                # Launch browser with video recording enabled
                browser = p.chromium.launch(
                    args=['--no-sandbox', '--disable-dev-shm-usage']
                )
                
                # Create browser context with video recording
                context = browser.new_context(
                    viewport={'width': 1920, 'height': 1080},
                    record_video_dir=VIDEO_DIR,
                    record_video_size={'width': 1920, 'height': 1080}
                )
                
                capture_results = []
                
                # Test each URL with its specified user type
                for url_info in URLS_TO_TEST:
                    success = capture_url_with_user_type(context, url_info, admin_credentials)
                    capture_results.append({
                        'name': url_info['name'],
                        'description': url_info['description'],
                        'user_type': url_info['user_type'],
                        'success': success
                    })

                # Close browser context and browser
                context.close()
                browser.close()
                
                # Print comprehensive summary
                logger.info("\n" + "="*80)
                logger.info("COMPREHENSIVE GUEST USER DEMO SUMMARY")
                logger.info("="*80)
                successful = sum(1 for r in capture_results if r['success'])
                total = len(capture_results)
                logger.info(f"Successfully captured: {successful}/{total} URL/user combinations")
                
                logger.info("\nResults by user type:")
                for user_type in ['anonymous', 'guest', 'admin']:
                    user_results = [r for r in capture_results if r['user_type'] == user_type]
                    user_successful = sum(1 for r in user_results if r['success'])
                    logger.info(f"  {user_type.title()} user: {user_successful}/{len(user_results)} successful")
                
                logger.info("\nDetailed results:")
                for result in capture_results:
                    status = "✅" if result['success'] else "❌"
                    logger.info(f"{status} [{result['user_type'].upper()}] {result['name']}: {result['description']}")
                
                # List generated files
                logger.info("\n" + "="*80)
                logger.info("GENERATED FILES")
                logger.info("="*80)
                
                screenshot_files = [f for f in os.listdir(OUTPUT_DIR) if f.endswith('.png')] if os.path.exists(OUTPUT_DIR) else []
                video_files = [f for f in os.listdir(VIDEO_DIR) if f.endswith('.webm')] if os.path.exists(VIDEO_DIR) else []
                
                logger.info(f"Screenshots ({len(screenshot_files)}):")
                for f in sorted(screenshot_files):
                    logger.info(f"  📸 {f}")
                
                logger.info(f"Videos ({len(video_files)}):")
                for f in sorted(video_files):
                    logger.info(f"  🎥 {f}")
                
                if successful == 0:
                    logger.error("\n⚠️  WARNING: No URLs were captured successfully!")
                    sys.exit(1)
                elif successful < total:
                    logger.warning(f"\n⚠️  WARNING: {total - successful} URLs failed to capture")
                else:
                    logger.info(f"\n🎉 All URLs captured successfully!")
                    
                logger.info(f"\nDemo completed at {datetime.now()}")

        if __name__ == '__main__':
            main()
        EOF

    - name: Run comprehensive guest user demonstration
      run: |
        echo "=== Starting comprehensive guest user demonstration ==="
        python take_comprehensive_demo.py
      env:
        DJANGO_SUPERUSER_USERNAME: testuser
        DJANGO_SUPERUSER_PASSWORD: testpassword123
        BASE_URL: http://127.0.0.1:8000

    - name: Collect all log files
      if: always()
      run: |
        echo "=== Collecting log files ==="
        mkdir -p logs
        
        # Copy Django debug log
        if [ -f django_debug.log ]; then
          cp django_debug.log logs/django_debug.log
          echo "Django debug log copied"
        else
          echo "No Django debug log found"
        fi
        
        # Copy Django server log
        if [ -f django_server.log ]; then
          cp django_server.log logs/django_server.log
          echo "Django server log copied"
        else
          echo "No Django server log found"
        fi
        
        # Copy demo process log
        if [ -f demo_process.log ]; then
          cp demo_process.log logs/demo_process.log
          echo "Demo process log copied"
        else
          echo "No demo process log found"
        fi
        
        # Create a comprehensive summary log
        cat > logs/summary.log << EOF
        Django Guest User Comprehensive Demo Summary
        ===========================================
        Timestamp: $(date)
        Django Settings: test_proj.settings_debug
        Base URL: $BASE_URL
        Debug Mode: $DEBUG
        Django Log Level: $DJANGO_LOG_LEVEL
        
        Test Coverage: Complete django-guest-user2 URL structure
        User Types Tested: Anonymous, Guest, Admin
        Features Demonstrated:
        - Guest user automatic creation
        - Permission-based access control
        - Decorator-based views (@allow_guest_user, @guest_user_required, @regular_user_required)
        - Mixin-based views (AllowGuestUserMixin, GuestUserRequiredMixin, RegularUserRequiredMixin)
        - Guest user to regular user conversion workflow
        - Admin interface integration
        
        URLs Tested (15 combinations):
        - /admin/ (anonymous & admin)
        - /allow_guest_user/ (all user types)
        - /guest_user_required/ (anonymous & guest)
        - /regular_user_required/ (anonymous & admin)  
        - /mixin/* views (appropriate user types)
        - /convert/ (conversion workflow)
        - /convert/success/ (success page)
        
        Screenshots Generated:
        $(find screenshots -name "*.png" 2>/dev/null | sort || echo "No screenshots found")
        
        Videos Generated:
        $(find videos -name "*.webm" 2>/dev/null | sort || echo "No videos found")
        
        Log Files:
        $(find logs -name "*.log" 2>/dev/null | sort || echo "No log files found")
        EOF
        
        echo "All log files collected in logs/ directory"
        ls -la logs/ || echo "No logs directory found"

    - name: Upload screenshots as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: django-guest-user-comprehensive-screenshots
        path: screenshots/
        retention-days: 30

    - name: Upload videos as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: django-guest-user-comprehensive-videos
        path: videos/
        retention-days: 30

    - name: Upload debug logs as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: django-guest-user-comprehensive-logs
        path: logs/
        retention-days: 30

    - name: Display comprehensive demo summary
      if: always()
      run: |
        echo "=== COMPREHENSIVE DEMO SUMMARY ==="
        if [ -f logs/summary.log ]; then
         cat logs/summary.log
        fi
        
        echo ""
        echo "=== SCREENSHOT FILES ==="
        if [ -d screenshots ]; then
          ls -la screenshots/
        else
          echo "No screenshots directory found"
        fi
        
        echo ""
        echo "=== VIDEO FILES ==="
        if [ -d videos ]; then
          ls -la videos/
        else
          echo "No videos directory found"
        fi
        
        echo ""
        echo "=== LOG FILES ==="
        if [ -d logs ]; then
          ls -la logs/
        else
          echo "No logs directory found"
        fi

    - name: Stop Django server
      if: always()
      run: |
        if [ -f django_server.pid ]; then
          kill $(cat django_server.pid) || true
          rm django_server.pid
        fi
